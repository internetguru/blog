<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flow&#39;s action decision tree</title>
    <url>/flow-actions/</url>
    <content><![CDATA[<h1 id="Flow’s-action-decision-tree"><a href="#Flow’s-action-decision-tree" class="headerlink" title="Flow’s action decision tree"></a>Flow’s action decision tree</h1><p>Advancement in branching models is mostly deterministic. That’s why the term ‘flow’ often appears in branching model names. Internet Guru Flow is a CLI tool for developers designed to automate that flow.</p>
<p>Flow moves forward (flows) on a branching model. By default, it releases the current branch into the appropriate destination. Let’s explore how Flow determines the destination and how you can influence it.</p>
<h2 id="Flow-key-branches"><a href="#Flow-key-branches" class="headerlink" title="Flow key branches"></a>Flow key branches</h2><p>Flow recognizes three key branches: development, staging, and production. These branches ‘flow’ into each other in that order. Development into staging and staging into production. The production branch can only ‘flow’ into its hotfix. The same is true for individual ‘major’ branches (e.g. <code>prod‑1</code>) that follow the production branch while matching its major version.</p>
<ul>
<li>Command <code>flow</code> on the <em>develop</em> branch results into action ‘release development branch’.</li>
<li>Command <code>flow</code> on the <em>staging</em> branch results into action ‘release staging branch’.</li>
<li>Command <code>flow</code> on the <em>production</em> or <em>major</em> branch results into command <code>flow hotfix</code> (see below).</li>
</ul>
<p>Running Flow with a key branch argument results into similar actions. This works regardless of the current branch.</p>
<ul>
<li>Command <code>flow develop</code> results into action ‘release development branch’.</li>
<li>Command <code>flow staging</code> results into action ‘release staging branch’.</li>
<li>Command <code>flow prod</code> or <code>flow prod‑1</code> results into command <code>flow hotfix</code> (see below).</li>
</ul>
<h2 id="Flow-hotfixes-and-features"><a href="#Flow-hotfixes-and-features" class="headerlink" title="Flow hotfixes and features"></a>Flow hotfixes and features</h2><p>Any other existing branch besides key branches is considered a feature or hotfix. Flow differentiates them by their relation to key branches. Feature branches are merged into the development branch. Similarly, hotfixes are merged to the production branch and into the corresponding ‘major’ branch.</p>
<ul>
<li>Command <code>flow</code> on a <em>feature</em> branch results into action ‘release feature’.</li>
<li>Command <code>flow</code> on a <em>hotfix</em> branch results into action ‘release hotfix’.</li>
</ul>
<p>Using the ‘hotfix’ or ‘feature’ keyword results in a hotfix or feature action regardless of the current branch. The default hotfix or feature branch is either created or merged based on its existence.</p>
<ul>
<li>Command <code>flow feature</code> results into action ‘create&#x2F;release default feature’.</li>
<li>Command <code>flow hotfix</code> results into action ‘create&#x2F;release default hotfix’.</li>
</ul>
<h2 id="Flow-arbitrary-branches"><a href="#Flow-arbitrary-branches" class="headerlink" title="Flow arbitrary branches"></a>Flow arbitrary branches</h2><p>As stated above, any arbitrary branch is considered either a feature or hotfix. Therefore running Flow with an arbitrary branch name argument results in creating or releasing a feature or a hotfix of that name with the following logic.</p>
<ol>
<li>If the specified branch exists, it is merged accordingly (as a feature or hotfix).</li>
<li>Else if on a production branch (or a ‘major’ production branch), a hotfix is created.</li>
<li>Else a new feature is created.</li>
</ol>
<h2 id="Try-Flow-today"><a href="#Try-Flow-today" class="headerlink" title="Try Flow today"></a>Try Flow today</h2><p>Flow emphasizes simplicity in its usage. No arguments are needed unless you want to specify a different or new branch. For ease of use, Flow always prompts for confirmation before proceeding.</p>
<p>If you’re interested, feel free to <a href="https://github.com/internetguru/flow">download Flow from GitHub</a>. Check out the tutorial for an easy way to get started. Your feedback is welcome as well as suggestions and contribution.</p>
]]></content>
      <categories>
        <category>flow</category>
      </categories>
      <tags>
        <tag>cli</tag>
        <tag>git</tag>
        <tag>automation</tag>
        <tag>development</tag>
      </tags>
  </entry>
  <entry>
    <title>Handle Changelog with Flow</title>
    <url>/flow-changelog/</url>
    <content><![CDATA[<h1 id="Handle-Changelog-with-Flow"><a href="#Handle-Changelog-with-Flow" class="headerlink" title="Handle Changelog with Flow"></a>Handle Changelog with Flow</h1><p>A good changelog is a quality indicator of well-managed software.<br>Flow is a command-line interface (CLI) tool designed to help follow a branching model and advance through it. Among other things, Flow helps maintain the changelog.</p>
<p>Following the <a href="https://keepachangelog.com/en/">Keep a changelog</a> convention, Flow adds or modifies lines in changelog according to each action. It validates the changelog’s structure and offers corrections if needed.</p>
<h2 id="Validation-and-conform-feature"><a href="#Validation-and-conform-feature" class="headerlink" title="Validation and conform feature"></a>Validation and conform feature</h2><p>Before anything else, Flow validates the changelog on each key branch. It not only checks for its presence, but also looks for required stamps that each changelog has to contain in order to be compliant with the branching model.</p>
<p>Most detected irregularities can be resolved automatically. There is a default structure and a hierarchy of inheritance, with specific entries added consecutively for each branch.</p>
<h2 id="The-release-process"><a href="#The-release-process" class="headerlink" title="The release process"></a>The release process</h2><p>When a staging branch is created, Flow marks the unreleased section as a version release candidate, for example, <code>0.1.0-rc1</code>. Additionally, it creates a new ‘Unreleased’ section for the dev branch.</p>
<figure class="highlight markdown"><figcaption><span>Before</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">## [Unreleased]</span></span><br><span class="line"></span><br><span class="line"><span class="section">### Added</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Entry 1</span><br><span class="line"><span class="bullet">-</span> Entry 2</span><br><span class="line"><span class="bullet">-</span> Entry 3</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><figcaption><span>After</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">## [Unreleased]</span></span><br><span class="line"></span><br><span class="line"><span class="section">## [0.1.0-rc1] - 2023-04-08</span></span><br><span class="line"></span><br><span class="line"><span class="section">### Added</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Entry 1</span><br><span class="line"><span class="bullet">-</span> Entry 2</span><br><span class="line"><span class="bullet">-</span> Entry 3</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>Any subsequent release of the development branch increments the release candidate number until the staging branch is released into production. Only after the staging branch is released, Flow creates the new version release, resetting the release candidate number to 1.</p>
<h2 id="Features-and-hotfixes"><a href="#Features-and-hotfixes" class="headerlink" title="Features and hotfixes"></a>Features and hotfixes</h2><p>Upon releasing a feature, Flow prompts you for a changelog entry describing the feature. There is a list of commits from the feature branch as a memory refresher. Flow also provides available keywords, with the default being ‘Added’, and adds an automatic entry if this step is skipped.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">###</span></span><br><span class="line"><span class="section"># Enter &#x27;json-format&#x27; description for CHANGELOG.md</span></span><br><span class="line"><span class="section">#   New line for multiple entries.</span></span><br><span class="line"><span class="section">#   Empty message to skip or end editing.</span></span><br><span class="line"><span class="section">#</span></span><br><span class="line"><span class="section"># Format</span></span><br><span class="line"><span class="section">#   &#x27;keyword: message&#x27;</span></span><br><span class="line"><span class="section">#</span></span><br><span class="line"><span class="section"># Available keywords</span></span><br><span class="line"><span class="section">#   Added Changed Deprecated Removed Fixed Security</span></span><br><span class="line"><span class="section">#</span></span><br><span class="line"><span class="section"># Branch &#x27;json-format&#x27; commits</span></span><br><span class="line"><span class="section">#   593d0f4 Add unit test 29</span></span><br><span class="line"><span class="section">#   264526b Add JSON format</span></span><br><span class="line"><span class="section">###</span></span><br><span class="line"></span><br><span class="line">Added: |</span><br></pre></td></tr></table></figure>

<p>The same process applies when releasing a hotfix. In such a case, the default changelog keyword is ‘Fixed’. In addition to features, Flow adds a changelog stamp as the patch version is incremented. Read more about <a href="/flow-version/" title="Version handling with Flow">version handling with Flow</a>.</p>
<h2 id="Try-Flow-today"><a href="#Try-Flow-today" class="headerlink" title="Try Flow today"></a>Try Flow today</h2><p>Flow has been instrumental in helping our team manage projects more efficiently for several years, allowing us to deliver high-quality software to our clients. We believe that Flow can do the same for you and your team.</p>
<p>If you’re interested, feel free to <a href="https://github.com/internetguru/flow">download Flow from GitHub</a>. Check out the tutorial for an easy way to get started. Your feedback is welcome as well as suggestions and contribution.</p>
]]></content>
      <categories>
        <category>flow</category>
      </categories>
      <tags>
        <tag>cli</tag>
        <tag>git</tag>
        <tag>automation</tag>
        <tag>development</tag>
      </tags>
  </entry>
  <entry>
    <title>Maintain a branching model with Flow</title>
    <url>/flow-intro/</url>
    <content><![CDATA[<h1 id="Maintain-a-branching-model-with-Flow"><a href="#Maintain-a-branching-model-with-Flow" class="headerlink" title="Maintain a branching model with Flow"></a>Maintain a branching model with Flow</h1><p>Software development is a continuous process. Maintaining a branching model can be time consuming. That’s where Flow comes into play. It’s a command-line developer tool that automates tasks of maintaining and advancing a project on common git branching models.</p>
<p>Flow reduces human errors and streamlines the workflow. It enables you to focus on the development instead of technicalities. Flow offers a wide range of features that have resulted from being used on projects of various sizes over years.</p>
<h2 id="Branching-model-automation"><a href="#Branching-model-automation" class="headerlink" title="Branching model automation"></a>Branching model automation</h2><p>Flow automation features simplify branching tasks by providing default actions and advising users on the next steps. It supports parallel hotfixing and can also create pull requests instead of direct releases.</p>
<ul>
<li>Flow requires <em>no arguments</em> and derives a <a href="/flow-actions/" title="Flow&#39;s action decision tree">default action for the current branch</a>.</li>
<li>Flow switches between branches accordingly and advises what to do next.</li>
<li>Flow can create pull requests instead of releasing directly.</li>
<li>Flow maintains separate production branches for major versions, such as <code>prod‑1</code>.</li>
<li>Flow supports parallel hotfixing, even for separate production branches.</li>
</ul>
<h2 id="Branching-model-validation"><a href="#Branching-model-validation" class="headerlink" title="Branching model validation"></a>Branching model validation</h2><p>The validation phase ensures that your project is compliant with a branching model. Flow additionally handles semantic versioning, and keeps track of the release history.</p>
<ul>
<li>Flow validates and automatically <em>fixes project structures</em> to conform to the branching model.</li>
<li>Flow pulls and pushes all key branches and ensures that local branches are not behind.</li>
<li>Flow handles <a href="https://semver.org/">semantic versioning</a> across all key branches. Read more about <a href="/flow-version/" title="Version handling with Flow">version handling with Flow</a>.</li>
<li>Flow keeps track of a release history with the <a href="https://keepachangelog.com/en/">Keep a CHANGELOG</a> convention. Read more about <a href="/flow-changelog/" title="Handle Changelog with Flow">changelog handling with Flow</a>.</li>
</ul>
<h2 id="Setup-and-configuration"><a href="#Setup-and-configuration" class="headerlink" title="Setup and configuration"></a>Setup and configuration</h2><p>Flow can be initiated in any folder with or without files and on any existing git repository. Flow adapts to existing branches from a variety of common naming conventions.</p>
<ul>
<li>Flow can initiate a git branching repository in any folder with or without files.</li>
<li>Flow can convert any existing git repository to a git branching model.</li>
<li>Flow automatically adapts to existing branches, such as ‘release’ instead of the default ‘staging’.</li>
</ul>
<h2 id="Try-Flow-today"><a href="#Try-Flow-today" class="headerlink" title="Try Flow today"></a>Try Flow today</h2><p>Flow has been instrumental in helping our team manage projects more efficiently for several years, allowing us to deliver high-quality software for our clients. We believe that Flow can do the same for your team.</p>
<p>If you’re interested, feel free to <a href="https://github.com/internetguru/flow">download Flow from GitHub</a>. Check out the tutorial for an easy way to get started. Your feedback is welcome as well as suggestions and contribution.</p>
]]></content>
      <categories>
        <category>flow</category>
      </categories>
      <tags>
        <tag>cli</tag>
        <tag>git</tag>
        <tag>automation</tag>
        <tag>development</tag>
      </tags>
  </entry>
  <entry>
    <title>Merging branches with Flow</title>
    <url>/flow-merging/</url>
    <content><![CDATA[<h1 id="Merging-branches-with-Flow"><a href="#Merging-branches-with-Flow" class="headerlink" title="Merging branches with Flow"></a>Merging branches with Flow</h1><p>In accordance with typical git branching models, Flow defines key branches, feature and hotfix branches, and individual major branches. Flow helps developers keep track of those branches and their mutual relations.</p>
<h2 id="Merging-key-branches"><a href="#Merging-key-branches" class="headerlink" title="Merging key branches"></a>Merging key branches</h2><p>Flow ensures that key branches exist and are merged into subordinate branches (production branch to staging, staging to development). Flow reports any irregularities and offers to correct them automatically. Such as the following bug fixing on staging:</p>
<figure class="highlight plaintext"><figcaption><span>Before</span></figcaption><table><tr><td class="code"><pre><span class="line">      A---B---C staging</span><br><span class="line">     /</span><br><span class="line">D---E develop</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>After</span></figcaption><table><tr><td class="code"><pre><span class="line">      A---B---C staging</span><br><span class="line">     /         \</span><br><span class="line">D---E-----------F develop</span><br></pre></td></tr></table></figure>

<p>Flow handles more complex merging actions, such as releasing a hotfix. This results in subsequent merges of the hotfix to production branch, production to staging (if not merged), and staging to development branch. It also fixes any partial inconsistencies.</p>
<h2 id="Merging-features"><a href="#Merging-features" class="headerlink" title="Merging features"></a>Merging features</h2><p>Feature branches are created from and merged into the development branch on demand. Flow also checks for potential collisions <em>before</em> the actual merging takes place.</p>
<figure class="highlight plaintext"><figcaption><span>Before</span></figcaption><table><tr><td class="code"><pre><span class="line">      A---B---C feature</span><br><span class="line">     /</span><br><span class="line">D---E---F---G---H develop</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>During</span></figcaption><table><tr><td class="code"><pre><span class="line">      A---B---C---I feature</span><br><span class="line">     /           /</span><br><span class="line">D---E---F---G---H develop</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>After</span></figcaption><table><tr><td class="code"><pre><span class="line">      A---B---C---I</span><br><span class="line">     /           / \</span><br><span class="line">D---E---F---G---H---J develop</span><br></pre></td></tr></table></figure>

<h2 id="Merging-hotfixes"><a href="#Merging-hotfixes" class="headerlink" title="Merging hotfixes"></a>Merging hotfixes</h2><p>In addition to features, releasing hotfixes requires additional merging. According to branching models, the production branch must be merged into the development branch. Flow takes care of that automatically, including <a href="/flow-version/" title="Version handling with Flow">version incrementing</a> and <a href="/flow-changelog/" title="Handle Changelog with Flow">changelog handling</a>.</p>
<figure class="highlight plaintext"><figcaption><span>Before</span></figcaption><table><tr><td class="code"><pre><span class="line">  D---E hotfix</span><br><span class="line"> /</span><br><span class="line">A prod, staging [0.0.0]</span><br><span class="line"> \</span><br><span class="line">  B---C develop [0.1.0]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>After</span></figcaption><table><tr><td class="code"><pre><span class="line">  D---E</span><br><span class="line"> /     \</span><br><span class="line">A-------F prod, staging [0.0.1]</span><br><span class="line"> \       \</span><br><span class="line">  B---C---G develop [0.1.0]</span><br></pre></td></tr></table></figure>

<p>According to branching models, the production branch must also be merged into an (unreleased) staging branch. Flow handles this as well.</p>
<h2 id="Merging-the-staging-branch"><a href="#Merging-the-staging-branch" class="headerlink" title="Merging the staging branch"></a>Merging the staging branch</h2><p>Flow maintains a staging branch initially attached to the production branch. Releasing the development branch creates a separate staging branch designated for bug fixing. All fixes must be merged back into the development branch until the staging branch is released.</p>
<figure class="highlight plaintext"><figcaption><span>Initial state</span></figcaption><table><tr><td class="code"><pre><span class="line">A prod, staging [0.0.0]</span><br><span class="line"> \</span><br><span class="line">  B---C develop [0.1.0]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>Release develop</span></figcaption><table><tr><td class="code"><pre><span class="line">A prod [0.0.0]</span><br><span class="line"> \</span><br><span class="line">  \       D staging [0.1.0]</span><br><span class="line">   \     / \</span><br><span class="line">    B---C---E develop [0.2.0]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>Bug fix on staging</span></figcaption><table><tr><td class="code"><pre><span class="line">A prod [0.0.0]</span><br><span class="line"> \</span><br><span class="line">  \       D---F staging [0.1.0]</span><br><span class="line">   \     / \   \</span><br><span class="line">    B---C---E---G develop [0.2.0]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>Release staging</span></figcaption><table><tr><td class="code"><pre><span class="line">A---------------H prod, staging [0.1.0]</span><br><span class="line"> \             / \</span><br><span class="line">  \       D---F   \</span><br><span class="line">   \     / \   \   \</span><br><span class="line">    B---C---E---G---I develop [0.2.0]</span><br></pre></td></tr></table></figure>

<p>Unlike feature and hotfix branches, the staging branch is never removed. It is still present despite being fully merged to production. This allows for consistent CI&#x2F;CD in the context of beta-testing.</p>
<h2 id="Additional-production-branches"><a href="#Additional-production-branches" class="headerlink" title="Additional production branches"></a>Additional production branches</h2><p>There is a set of production branches that Flow automatically maintains – one for each major version. This allows an independent hotfixing of any major branch anytime in the future.</p>
<p>When releasing a staging branch, Flow makes sure there is a corresponding major branch. Note that there is always a general staging branch matching the most current major branch. Assume the first and the last state from the previous example releasing a major version of <code>[1.0.0]</code> instead of minor <code>[0.1.0]</code>.</p>
<figure class="highlight plaintext"><figcaption><span>Initial state</span></figcaption><table><tr><td class="code"><pre><span class="line">A prod, staging, prod-0 [0.0.0]</span><br><span class="line"> \</span><br><span class="line">  B---C develop [1.0.0]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>Release staging</span></figcaption><table><tr><td class="code"><pre><span class="line">A---------------H prod, staging, prod-1 [1.0.0]</span><br><span class="line"> \             / \</span><br><span class="line">  \       D---F   \</span><br><span class="line">   \     / \   \   \</span><br><span class="line">    B---C---E---G---I develop [1.1.0]</span><br></pre></td></tr></table></figure>

<p>Note that there still exists a major branch <code>prod-0</code> on commit <code>A</code> with a version of <code>[0.0.0]</code>. When merging a hotfix, Flow selects its corresponding ‘major’ branch. That means any major version can be hotfixed independently regardless of when the branch or the hotfix was created.</p>
<h2 id="Try-Flow-today"><a href="#Try-Flow-today" class="headerlink" title="Try Flow today"></a>Try Flow today</h2><p>Advanced branching models introduce significant overhead for developers in terms of merging. Flow automates these tasks into a single, often one-word, command. With Flow, you can be sure the project is compliant and you can focus on development.</p>
<p>If you’re interested, feel free to <a href="https://github.com/internetguru/flow">download Flow from GitHub</a>. Check out the tutorial for an easy way to get started. Your feedback is welcome as well as suggestions and contribution.</p>
]]></content>
      <categories>
        <category>flow</category>
      </categories>
      <tags>
        <tag>cli</tag>
        <tag>git</tag>
        <tag>automation</tag>
        <tag>development</tag>
      </tags>
  </entry>
  <entry>
    <title>Version handling with Flow</title>
    <url>/flow-version/</url>
    <content><![CDATA[<h1 id="Version-handling-with-Flow"><a href="#Version-handling-with-Flow" class="headerlink" title="Version handling with Flow"></a>Version handling with Flow</h1><p>Version numbers play a crucial role in branching models. Flow is a command-line developer tool to maintain software projects compliant with a branching model. Additionally, Flow offers robust version handling and ensures that version numbers are always in compliance with the model.</p>
<h2 id="Validation-and-compliance"><a href="#Validation-and-compliance" class="headerlink" title="Validation and compliance"></a>Validation and compliance</h2><p>Flow ensures all version files are present and valid. For example, the development major or minor version must be greater than the staging version. Flow not only verifies versions but also reports irregularities and offers to correct them.</p>
<figure class="highlight plaintext"><figcaption><span>Before</span></figcaption><table><tr><td class="code"><pre><span class="line">A prod [0.0.0]</span><br><span class="line"> \</span><br><span class="line">  B---C develop [0.0.0] (invalid)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>After</span></figcaption><table><tr><td class="code"><pre><span class="line">A prod [0.0.0]</span><br><span class="line"> \</span><br><span class="line">  B---C develop [0.1.0] (fixed)</span><br></pre></td></tr></table></figure>

<p>Similarly, the (unreleased) staging version must be greater than the production version and lower than the development version. Flow can fix this as well, including missing version files and invalid version formats.</p>
<h2 id="The-release-process"><a href="#The-release-process" class="headerlink" title="The release process"></a>The release process</h2><p>During the general release process, from development to staging to production, Flow preserves the source version value. After the first release candidate is created, Flow automatically increments the minor version on the development branch for future releases.</p>
<figure class="highlight plaintext"><figcaption><span>Before</span></figcaption><table><tr><td class="code"><pre><span class="line">A prod [0.0.0]</span><br><span class="line"> \</span><br><span class="line">  B---C develop [0.1.0]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>After</span></figcaption><table><tr><td class="code"><pre><span class="line">A prod [0.0.0]</span><br><span class="line"> \</span><br><span class="line">  \       D staging [0.1.0]</span><br><span class="line">   \     /</span><br><span class="line">    B---C develop [0.2.0]</span><br></pre></td></tr></table></figure>

<p>When the development branch is released multiple times without releasing the staging branch, versions on the development and staging branches are preserved. However, the release candidate number increments. Read more about <a href="/flow-changelog/" title="Handle Changelog with Flow">handling changelog with Flow</a>.</p>
<p>Note: The diagrams presented only display relevant information related to the topic at hand. Additional details, such as tags, branches, and commits that occur in the model, are omitted.</p>
<h2 id="Hotfixing"><a href="#Hotfixing" class="headerlink" title="Hotfixing"></a>Hotfixing</h2><p>Hotfixes are released into the production branch using a non-fast-forward merge. Flow automatically increments the patch version number, removes the hotfix branch, and prompts for a changelog entry.</p>
<figure class="highlight plaintext"><figcaption><span>Before</span></figcaption><table><tr><td class="code"><pre><span class="line">      A---B---C hotfix [0.1.0]</span><br><span class="line">     /</span><br><span class="line">D---E prod [0.1.0]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>After</span></figcaption><table><tr><td class="code"><pre><span class="line">      A---B---C</span><br><span class="line">     /         \</span><br><span class="line">D---E-----------F prod [0.1.1]</span><br></pre></td></tr></table></figure>

<p>The hotfix version is not incremented until it is merged. This supports multiple parallel hotfixes. Hotfixes are also released into separate production branches corresponding to their major version. Read more about <a href="/flow-merging/" title="Merging branches with Flow">merging branches with Flow</a>.</p>
<h2 id="Try-Flow-today"><a href="#Try-Flow-today" class="headerlink" title="Try Flow today"></a>Try Flow today</h2><p>Flow’s version handling capabilities make it easy to track your project’s progress and ensure that your version numbers are always in compliance.</p>
<p>If you’re interested, feel free to <a href="https://github.com/internetguru/flow">download Flow from GitHub</a>. Check out the tutorial for an easy way to get started. Your feedback is welcome as well as suggestions and contribution.</p>
]]></content>
      <categories>
        <category>flow</category>
      </categories>
      <tags>
        <tag>cli</tag>
        <tag>git</tag>
        <tag>automation</tag>
        <tag>development</tag>
      </tags>
  </entry>
</search>
