<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Introducing Flow: A CLI tool for git flow</title>
    <url>/2023/04/05/Introducing-Flow-A-CLI-tool-for-git-flow/</url>
    <content><![CDATA[<p>As a developer, you understand the importance of maintaining a branching model. That’s where Flow comes in. It’s a CLI developer tool that simplifies the process of maintaining a project on a branching model.</p>
<span id="more"></span>

<p>Flow helps to reduce human errors and streamline your workflow, allowing you to focus on what really matters – developing high-quality software. Flow offers a wide range of features arising from using it on our small-to-bigger projects over years.</p>
<h2 id="Git-Flow-Automation"><a href="#Git-Flow-Automation" class="headerlink" title="Git Flow Automation"></a>Git Flow Automation</h2><p>The Flow automation features simplify branching tasks by providing default actions and advising users on next steps. It also supports parallel hotfixing and creates GitHub pull requests instead of direct releases.</p>
<ul>
<li>It has a simple usage that <em>requires no arguments</em> picking a default action for you.</li>
<li>It takes you across branches with the flow and advises what to do next.</li>
<li>It creates GitHub pull requests instead of releasing directly when asked.</li>
<li>It maintains separate production branches for major versions, such as <code>prod-1</code>.</li>
<li>It supports parallel hotfixing, even for separate production branches.</li>
</ul>
<h2 id="Branching-Model-Validation"><a href="#Branching-Model-Validation" class="headerlink" title="Branching Model Validation"></a>Branching Model Validation</h2><p>The validation features ensure project conformity to the branching model, manage semantic versioning, and track release history.</p>
<ul>
<li>It validates and automatically <em>fixes projects</em> to conform to the branching model.</li>
<li>It pulls and pushes all key model branches and checks whether local branches are not behind.</li>
<li>It handles <a href="https://semver.org/">semantic versioning</a> across all key branches.</li>
<li>It keeps track of a release history with the <a href="https://keepachangelog.com/en">Keep a CHANGELOG</a> convention.</li>
</ul>
<h2 id="Setup-and-Configuration"><a href="#Setup-and-Configuration" class="headerlink" title="Setup and Configuration"></a>Setup and Configuration</h2><p>The Setup and Configuration features facilitate the branching model setup, repository conversion, and pre-existing branch adaptation.</p>
<ul>
<li>It can initiate a git flow branching repository on any selected folder.</li>
<li>It can convert an existing git repository into a git flow branching model.</li>
<li>It automatically adapts to pre-existing branches, such as ‘release’ instead of the default ‘staging’.</li>
</ul>
<h2 id="Give-Flow-a-chance"><a href="#Give-Flow-a-chance" class="headerlink" title="Give Flow a chance"></a>Give Flow a chance</h2><p>Flow has been instrumental in helping our team manage projects more efficiently for several years, allowing us to deliver high-quality software to our clients. We believe that this tool can do the same for you and your team.</p>
<p>If you’re interested in trying Flow for yourself, you can download it from GitHub. We welcome any feedback, suggestions, or contributions you may have, and we look forward to hearing from you.</p>
]]></content>
      <tags>
        <tag>flow</tag>
      </tags>
  </entry>
  <entry>
    <title>Version handling with Flow</title>
    <url>/2023/04/05/Version-handling-with-Flow/</url>
    <content><![CDATA[<p>In the branching models, version numbers play a crucial role. Flow is a powerful CLI developer tool to stick a software project to a branching model. In addition Flow offers robust version handling and ensures that your version numbers are always in compliance with the model.</p>
<span id="more"></span>

<h2 id="Validation-and-compliance"><a href="#Validation-and-compliance" class="headerlink" title="Validation and compliance"></a>Validation and compliance</h2><p>Flow ensures all versions in the branching model are present and compliant with the branching model. For example, the development version must be greater than the staging version, and the (unreleased) staging version must be greater than the stable version.</p>
<p>Not only Flow can verify version numbers, it will report irregularities and suggest fixing them for you. With the ‘conform’ parameter, it will fix missing version files as much as invalid version numbers. It will do so for all key branches consecutively.</p>
<h2 id="Versions-during-releasing"><a href="#Versions-during-releasing" class="headerlink" title="Versions during releasing"></a>Versions during releasing</h2><p>During the general release process from dev to staging to production, Flow maintains the version being released. However, after releasing dev to staging, Flow automatically increments the minor version on dev for future releases. This also meets the branching model requirements.</p>
<p>When the development branch is released repeatedly (before the staging branch is released), versions on dev and staging remain the same. However, the release candidate number increases. Read more about changelog handling with Flow.</p>
<p>Flow automatically increments the patch version number when a hotfix is released. Multiple parallel hotfixes are versioned consecutively in the order of their release. Additionally each hotfix is also released into an appropriate separate stable branch according to its major version.</p>
<p>In conclusion, Flow’s version handling capabilities make it easy to keep track of your project’s progress and ensure that your version numbers are always in compliance. To try out Flow and learn more about version handling and other features, visit our GitHub page.</p>
]]></content>
      <tags>
        <tag>flow</tag>
        <tag>version</tag>
      </tags>
  </entry>
</search>
